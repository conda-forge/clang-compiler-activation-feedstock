{% if version is not defined %}
{% set version = "20.1.2" %}
{% endif %}
{% set major_ver = version.split(".")[0] %}
# in the past we've had to uncouple the compiler version from the version
# of the C++ stdlib; keep the variable in case this happens again
{% set libcxx_major = major_ver %}

{% set build_number = 24 %}

package:
  name: clang-compiler-activation
  version: {{ version }}

# # Originally this was to enable automatic updates from the bot,
# # but that doesn't work with several LLVM versions at the same time
# source:
#   url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version.replace(".rc", "-rc") }}/llvm-project-{{ version.replace(".rc", "rc") }}.src.tar.xz
#   sha256: 326335a830f2e32d06d0a36393b5455d17dc73e0bd1211065227ee014f92cbf8  # [version == "13.0.1"]

build:
  skip: true  # [win]
  number: {{ build_number }}

requirements:
  build:
    - cctools_{{ target_platform }}  # [osx]
    - libcxx {{ libcxx_major }}
    - gcc_{{ target_platform }}      # [linux]
    - clang {{ version }}            # [osx]

outputs:
  - name: clang_impl_{{ cross_target_platform }}
    script: install-clang_impl.sh
    requirements:
      - clang {{ version }}
      - llvm-tools {{ version }}
      - cctools_{{ target_platform }}        # [osx]
      - cctools_{{ cross_target_platform }}
      - ld64_{{ cross_target_platform }}
      - ld64_{{ target_platform }}           # [osx]
      # this brings in an extra symlink of ld -> x86_64-apple-darwin13.4.0-ld
      # adding these generated an error w/ libtool: https://github.com/conda-forge/libtool-feedstock/issues/24
      # - ld64     # [cross_target_platform == target_platform]
      # - cctools  # [cross_target_platform == target_platform]
      # This brings in libraries for linux too. Split this again?
      - compiler-rt {{ version }}
      # For OSX, compiler-rt library includes both x86_64 and arm64.
      # Therefore `compiler-rt_osx-64` and `compiler-rt_osx-arm64` are basically the same
      # and clobber each other. Don't bring both here.
      - compiler-rt_{{ cross_target_platform }} {{ version }}     # [linux]
      - gcc_impl_{{ target_platform }}       # [linux]
    test:
      commands:
        - {{ CBUILD }}-clang --version
        - {{ CBUILD }}-clang-cpp --version
        - {{ macos_machine }}-clang --version
        - {{ macos_machine }}-clang-cpp --version

  - name: clang_{{ cross_target_platform }}
    script: install-clang.sh
    requirements:
      run:
        - {{ pin_subpackage("clang_impl_" ~ cross_target_platform, exact=True) }}
    test:
      commands:
        - ${CC} --version
        - ${CPP} --version
        - ${CC_FOR_BUILD} --version
        - ${CPP_FOR_BUILD} --version

  - name: clangxx_impl_{{ cross_target_platform }}
    script: install-clangxx_impl.sh
    requirements:
      build:
        - cctools_{{ target_platform }}   # [osx]
      host:
        - clangxx {{ version }}
        - libcxx {{ libcxx_major }}       # [osx]
        - {{ pin_subpackage('clang_impl_' ~ cross_target_platform, exact=True) }}
        - gxx_impl_{{ target_platform }}  # [linux]
        # hack to force the solver to work
        - libllvm{{ major_ver }} {{ version }}
      run:
        - clangxx {{ version }}
        # This is not needed in Linux for cross-compiling in a conda-build env, but is needed outside
        - libcxx >={{ libcxx_major }}
        - {{ pin_subpackage('clang_' ~ cross_target_platform, exact=True) }}
        - gxx_impl_{{ target_platform }}            # [linux]
    test:
      commands:
        - echo {{ MACOSX_DEPLOYMENT_TARGET }}  # [linux]
        - echo {{ uname_kernel_release }}
        - echo {{ uname_machine }}
        - echo {{ FINAL_PYTHON_SYSCONFIGDATA_NAME }}
        - echo {{ CBUILD }}
        - echo {{ meson_cpu_family }}
        - {{ CBUILD }}-clang++ --version
        - {{ macos_machine }}-clang++ --version

  - name: clangxx_{{ cross_target_platform }}
    script: install-clangxx.sh
    build:
      # Since transitive run_exports are not currently possible
      # (here I would like the run dependency on clangxx to pull in the run_exports from it).
      run_exports:
        strong:
          - libcxx >={{ libcxx_major }}
    requirements:
      run:
        - {{ pin_subpackage("clangxx_impl_" ~ cross_target_platform, exact=True) }}
        - {{ pin_subpackage("clang_" ~ cross_target_platform, exact=True) }}
    test:
      commands:
        - ${CXX} --version
        - ${CXX_FOR_BUILD} --version

  - name: clang_bootstrap_{{ cross_target_platform }}
    script: install-clang-bootstrap.sh
    requirements:
      build:
        - cctools_{{ target_platform }}  # [osx]
      host:
        - clangxx {{ version }}
        - libcxx {{ libcxx_major }}      # [cross_target_platform in ("osx-64", "osx-arm64")]
        - cctools_{{ cross_target_platform }}
        - ld64_{{ cross_target_platform }}
        - {{ pin_subpackage('clang_' ~ cross_target_platform, exact=True) }}
        - {{ pin_subpackage('clangxx_' ~ cross_target_platform, exact=True) }}
        # hack to force the solver to work
        - libllvm{{ major_ver }} {{ version }}
    build:
      always_include_files:
        - bin/
        - etc/
        - include/
        - lib/
        - libexec/
        - share/
      ignore_run_exports_from:
        - libllvm{{ major_ver }}
        - {{ pin_subpackage('clang_' ~ cross_target_platform, exact=True) }}
        - {{ pin_subpackage('clangxx_' ~ cross_target_platform, exact=True) }}
      skip: true  # [not osx]
    test:
      commands:
        - {{ macos_machine }}-clang --version
        - {{ macos_machine }}-clang-cpp --version
        - {{ macos_machine }}-clang++ --version
    about:
      home: https://llvm.org
      license: Apache-2.0
      license_family: Apache
      license_file: LLVM_LICENSE.txt
      summary: clang compiler components in one package for bootstrapping clang

about:
  home: http://github.com/conda-forge/clang-compiler-activation-feedstock
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: clang compilers for conda-build 3

extra:
  recipe-maintainers:
    - isuruf
    - katietz
    - h-vetinari
